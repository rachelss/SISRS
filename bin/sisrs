#!/usr/bin/env bash

#this script uses python2.7 - it has not been tested with python3

#run with non-defaults: ./sisrs -r ./reference.fasta -p 40 -f fastq -m 4 -a ./fastq_data/

VERSION=1.6

help() {
    cat <<ENDLINE

 SISRS: Site Identification from Short Read Sequences
 Version 1.6
 Copyright (c) 2013-2015 Rachel Schwartz <Rachel.Schwartz@asu.edu>
 https://github.com/rachelss/SISRS

Usage:

 sisrs command options

By default, SISRS assumes that

 * A reference genome is not available and a composite assembly will be
   assembled using Velvet
 * The K-mer size to be used by Velvet in contig assembly is 21.
 * Only one processor is available.
 * Files are in fastq format.
 * Paired read filenames end with _R1 and _R2
 * A site is only required to have data for two species to be included in the
   final alignment.
 * Folders containing reads are in the present working directory
 * SISRS data will be output into the present working directory
 * A minimum of three reads are required to call the base at a site
   for a taxon.

Commands:
 sites: produce an alignment of sites from raw reads

 loci: produce a set of aligned loci based on the most variable regions of
       the composite genome

 ===Subcommands of sites===

 subSample: run sisrs subsampling scheme, subsampling reads from all taxa to
            ~10X coverage across species, relative to user-given genome size

 buildContigs: run sisrs assembly step with user-given assembler

 alignContigs: align reads to composite genome as single-ended, uniqely mapped

 mapContigs: align composite genome reads to a reference genome (optional)

 identifyFixedSites: find sites with no within-taxa variation

 outputAlignment: output alignment file of sisrs sites

 changeMissing: given alignment of sites, output a file with only sites missing
                fewer than a specified number of samples per site

Option Flags:

 -g : the approximate genome size (MANDATORY if sisrs will be assembling a
      composite genome)
      - Used to reduce the size of the composite assembly by using a subset
        of total reads approximating 10x coverage
 -p : use this number of processors
 -r : the path to the reference genome in fasta format
 -k : k-mer size (for assembly)
 -f : the folder containing the folders of reads (absolute path)
 -z : the folder where SISRS will output data (Default: -f, othewise must be
      absolute path of empty or non-existent directory)
 -n : the number of reads required to call a base at a site
 -t : the threshold for calling a site; e.g. 0.99 means that >99% of
      bases for that taxon must be one allele; only recommended for
      low ploidy with <3 individuals
 -m : the number of species that are allowed to have missing data at
      a site
 -o : the length of the final loci dataset for dating
 -l : the number of alleles
 -a : assembler [velvet, minia, abyss, or premade]
      -If using a premade composite genome, it must be in a folder named
      'premadeoutput' in the same directory as the folders of read data,
      and must be called 'contigs.fa'
 -c : continous command mode for calling subcommands [1,0]
      Default=1, calling a subcommand runs that subcommand and all subsequent
      steps in the pipeline; 0, calling a subcommand runs only that subcommand

Note Regarding Subcommands: If calling a subcommand of sisrs, the folder
                            specified by -f (or pwd) must contain a previous
                            sisrs run that has reached previous steps

 Example command:
 sisrs sites -g 1745690 -p 40 -m 4 -f /usr/test_data
 sisrs sites -g 1745690 -p 40 -m 4 -f /usr/test_data -z /usr/SISRS_Output

 Example command:
 sisrs loci -g 1745690 -p 40 -m 4 -f /usr/test_data

ENDLINE
}

#use defaults or input values
KMER=21
MINREAD=3
PROCESSORS=1
MAINFOLDER=$( echo "$(pwd)")
THRESHOLD=1
ALLELES=1
DEBUG=0
ASSEMBLER=velvet
OUTLENGTH=500000
CMD=$1
SUBCOMMAND=1

cmds=(subSample buildContigs alignContigs mapContigs identifyFixedSites outputAlignment changeMissing)
if [[ "${CMD}" != "sites" ]] && [[ "${CMD}" != "loci" ]] && [[ ! "${cmds[*]}" =~ $CMD ]]; then
    help
    exit 0
fi

OPTIND=2 # tells getopts to start parsing at the second argument

while getopts g:r:k:p:m:a:f:z:n:t:o:l:c:hd option
do
    case "${option}"
	in
	g) GENOMESIZE=${OPTARG};;
	r) REFFILE=${OPTARG};;
	k) KMER=${OPTARG};;
	p) PROCESSORS=${OPTARG};;
	m) MISSING=${OPTARG};;
	f) MAINFOLDER=${OPTARG};;
  z) OUTFOLDER=${OPTARG};;
  a) ASSEMBLER=${OPTARG};;
	n) MINREAD=${OPTARG};;
	t) THRESHOLD=${OPTARG};;
  o) OUTLENGTH=${OPTARG};;
  l) ALLELES=${OPTARG};;
  c) SUBCOMMAND=${OPTARG};;
	d) DEBUG=1;;
	h) help; exit;;
	\? ) echo "Unknown option" >&2; exit 1;;
    esac
done

DIRS="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"    #where is the sisrs file?
DIR=$( dirname ${DIRS} )                                    #go one level up from location of sisrs file
MAINFOLDER=$( echo "${MAINFOLDER}" | sed -e "s/\/*$//" )    #remove trailing / if necessary

FILEID=_R1
FILEID2=$(echo ${FILEID} | sed 's/1/2/')

######checks########

if [[ "${ALLELES}" != "1" ]] && [[ "${ALLELES}" != "2" ]]; then
    echo "You must have either 1 or 2 alleles (1 is the default). Aborting."; exit 1;
fi

if [[ $ASSEMBLER == "velvet" ]]; then
    which velveth &>/dev/null
    [ $? -eq 0 ] || { echo "Velvet must be installed to run SISRS. The installation folder must be in your path. Velvet is called as 'velveth' and 'velvetg'.    Aborting."; exit 1; }
    CONTIGS=velvetoutput
elif [[ $ASSEMBLER == "minia" ]]; then
    which minia &>/dev/null
    [ $? -eq 0 ] || { echo "Minia must be installed to run SISRS. The installation folder must be in your path. Minia is called as 'minia'.    Aborting."; exit 1; }
    CONTIGS=miniaoutput
elif [[ $ASSEMBLER == "abyss" ]]; then
    which ABYSS &>/dev/null
    [ $? -eq 0 ] || { echo "Abyss must be installed to run SISRS. The installation folder must be in your path. Abyss is called as 'ABYSS'.    Aborting."; exit 1; }
    CONTIGS=abyssoutput
elif [[ $ASSEMBLER == "premade" ]]; then
    CONTIGS=premadeoutput
else
    echo "You must specify the assembler as velvet, minia, abyss, or point sisrs to a directory (-c) which contains a preassembled composite genome called 'contigs.fa'. If you do not specify an assembler SISRS will use velvet as the default.  Aborting."; exit 1;
fi

which bowtie2 &>/dev/null
[ $? -eq 0 ] || { echo "Bowtie2 must be installed to run SISRS. The installation folder must be in your path. Aborting."; exit 1; }
which parallel &>/dev/null
[ $? -eq 0 ] || { echo "GNU parallel must be installed to run SISRS. The installation folder must be in your path. Aborting."; exit 1; }
which samtools &>/dev/null
[ $? -eq 0 ] || { echo "Samtools v1.3.1 must be installed to run SISRS. The installation folder must be in your path. Aborting."; exit 1; }
[[ $(samtools --version-only| cut -c1-5) == "1.3.1" ]] || { echo "Samtools v1.3.1 must be installed to run SISRS. The installation folder must be in your path. Aborting."; exit 1; }
which rename.sh &>/dev/null
[ $? -eq 0 ] || { echo "BBMap must be installed to run SISRS. The installation folder must be in your path. Aborting."; exit 1; }
which mafft &>/dev/null
[ $? -eq 0 ] || { echo "MAFFT must be installed to run SISRS. The installation folder must be in your path. Aborting."; exit 1; }

function join_by { local IFS="$1"; shift; echo "$*"; }

###########Link Outfolder##############

if [[ "${MAINFOLDER}" = "${OUTFOLDER}" ]] || [[ -z $OUTFOLDER ]]; then     #Check if data folder and output folder are the same
    echo "Note: SISRS writing into data folder"
    OUTFOLDER=$( echo "${MAINFOLDER}" | sed -e "s/\/*$//" )

elif [[ ! -d "${OUTFOLDER}" ]]; then
    cp -as "${MAINFOLDER}" "${OUTFOLDER}" #Create output directory with links to data files if directory does not already exist
    OUTFOLDER=$( echo "${OUTFOLDER}" | sed -e "s/\/*$//" )

else
    echo "${OUTFOLDER} already exists. Checking if empty..."
    if [[ "$(ls -A ${OUTFOLDER})" ]]; then  #Check if specified output directory is empty
        echo "Specified output directory (${OUTFOLDER}) exists but is not empty. Aborting."
        exit 1
    else
        echo "${OUTFOLDER} exists and is empty. SISRS continuing..."
        cp -as "${MAINFOLDER}/"* "${OUTFOLDER}"   #Populate exisiting empty output directory with links to data files
        OUTFOLDER=$( echo "${OUTFOLDER}" | sed -e "s/\/*$//" )
    fi
fi

###########actions##############

FILELISTA=( $( find "${OUTFOLDER}" -name "*fastq" ) )

#get paired fastq
FILELIST=( $( find "${OUTFOLDER}" -name *${FILEID}*fastq ) )     #all fastq file paths as array
if [[ ${#FILELIST[@]} -gt 0 ]]; then
    declare -a ALLFOLDERLIST=()
    for F in "${FILELIST[@]}"; do ALLFOLDERLIST+=("$( dirname "${F}" )"); done       #array of directories containing fastq files
    FOLDERLIST=( $(echo "${ALLFOLDERLIST[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' ') )  #sorted unique list of folders with paired fastq files as array
fi

#get unpaired fastq
FILELISTU=()
for F in "${FILELISTA[@]}"; do
    if [[ $F != *${FILEID}*fastq ]] && [[ $F != *${FILEID2}*fastq ]] && [[ $F != *subsampled* ]]; then FILELISTU+=(${F})
    fi
done
if [[ ${#FILELISTU[@]} -gt 0 ]]; then
    declare -a ALLFOLDERLISTU=()
    for F in "${FILELISTU[@]}"; do ALLFOLDERLISTU+=("$( dirname "${F}" )"); done       #array of directories containing fastq files
    FOLDERLISTU=( $(echo "${ALLFOLDERLISTU[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' ') )  #sorted unique list of folders with unpaired fastq files as array
fi
FOLDERLISTA=( $(echo "${FOLDERLISTU[@]} ${FOLDERLIST[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' ') )

if [[ ${#FOLDERLISTA[@]} -lt 1 ]]; then
    echo "There were no data files"
    exit 1
fi

if [ -z "$MISSING" ]; then MISSING=$((${#FOLDERLISTA[@]} - 2)); fi    #minimum of data for 2 species unless otherwise specified

##############################
if [[ $ASSEMBLER == "premade" ]];then
    subSample(){
       echo "No subsampling necessary, using pre-assembled composite genome in ${CONTIGS}, continuing..."
    }
    buildContigs(){
      echo "No contig building necessary, using pre-assembled composite genome in ${CONTIGS}, continuing..."
    }
fi

if [[ $ASSEMBLER != "premade" ]];then
    subSample(){
        if [ -z $GENOMESIZE ]; then
            echo "You must enter the approximate size of the genome / transcriptome. For more information run sisrs -h"
            exit 1
        fi

        echo "Subsampling data"
        if [[ -e "${OUTFOLDER}"/subsamples ]]; then rm -r "${OUTFOLDER}"/subsamples; fi
        NUMER=$((10*${GENOMESIZE}))
        DENOM=$((100*2*${#FOLDERLISTA[@]}))      #assumes 100bp reads - add option in future
        LEFTREADS=$((${NUMER}/${DENOM}))
        mkdir ${OUTFOLDER}/subsamples
        parallel --jobs "${PROCESSORS}" "${DIR}/libexec/sisrs/sub_sample_for_velvet_unshuff.py ${LEFTREADS} {} ${FILEID} ${FILEID2}" ::: "${FOLDERLISTA[@]}"   #subsample data and shuffle

        if [[ $? != 0 ]]; then
            echo "Subsampling failed"
            exit 1
        fi
    }

    buildContigs(){
        if [[ -e "${OUTFOLDER}"/"${CONTIGS}" ]]; then rm -r ${OUTFOLDER}/${CONTIGS}; fi
        if [[ $ASSEMBLER == "velvet" ]]; then
            #make reference contigs - velveth
            if [ -n "${REFFILE}" ]; then
                if [[ ${#FILELISTU[@]} -gt 0 ]]; then
                    if [[ ${#FILELIST[@]} -gt 0 ]]; then
                        echo "Running Velvet with PE and SE reads, and reference"
                        velveth ${OUTFOLDER}/velvetoutput ${KMER} -create_binary -fasta -reference ${REFFILE} -fastq -shortPaired ${OUTFOLDER}/subsamples/*subsampledp.fastq -short ${OUTFOLDER}/subsamples/*subsampledu.fastq
                    else
                        echo "Running Velvet with SE reads and reference"
                        velveth ${OUTFOLDER}/velvetoutput ${KMER} -create_binary -fasta -reference ${REFFILE} -fastq -short ${OUTFOLDER}/subsamples/*subsampledu.fastq
                    fi
                else
                    echo "Running Velvet with PE reads and reference"
                    velveth ${OUTFOLDER}/velvetoutput ${KMER} -create_binary -fasta -reference ${REFFILE} -fastq -shortPaired ${OUTFOLDER}/subsamples/*subsampledp.fastq
                fi
            else
                if [[ ${#FILELISTU[@]} -gt 0 ]]; then
                    if [[ ${#FILELIST[@]} -gt 0 ]]; then
                        echo "Running Velvet with PE and SE reads"
                        velveth ${OUTFOLDER}/velvetoutput ${KMER} -create_binary -fastq -shortPaired ${OUTFOLDER}/subsamples/*subsampledp.fastq -short ${OUTFOLDER}/subsamples/*subsampledu.fastq
                    else
                        echo "Running Velvet with SE reads"
                        velveth ${OUTFOLDER}/velvetoutput ${KMER} -create_binary -fastq -short ${OUTFOLDER}/subsamples/*subsampledu.fastq
                    fi
                else
                    echo "Running Velvet with PE reads"
                    velveth ${OUTFOLDER}/velvetoutput ${KMER} -create_binary -fastq -shortPaired ${OUTFOLDER}/subsamples/*subsampledp.fastq
                fi
            fi
            echo ==== Velveth is finished ====

            velvetg ${OUTFOLDER}/velvetoutput -exp_cov auto -cov_cutoff auto# -min_contig_lgth 100     #run velvet - output contigs
            echo ==== Velvetg is finished ===
        fi

        if [[ $ASSEMBLER == "minia" ]]; then
            mkdir ${OUTFOLDER}/miniaoutput
            ls ${OUTFOLDER}/subsamples/*fastq | parallel -j ${PROCESSORS} basename > ${OUTFOLDER}/subsamples/minia_read_file.txt
            minia -in ${OUTFOLDER}/subsamples/minia_read_file.txt -kmer-size ${KMER} -nb-cores "${PROCESSORS}" -out ${OUTFOLDER}/miniaoutput/
            mv ${OUTFOLDER}/miniaoutput/.contigs.fa ${OUTFOLDER}/miniaoutput/contigs.fa
            rm ${OUTFOLDER}/miniaoutput/.h5
        fi

        if [[ $ASSEMBLER == "abyss" ]]; then
            mkdir ${OUTFOLDER}/abyssoutput
            ABYSS -k ${KMER} -o ${OUTFOLDER}/abyssoutput/contigs.fa ${OUTFOLDER}/subsamples/*fastq
        fi
    }
fi

alignContigs(){
    echo ==== Renaming Scaffolds for SISRS ====
    mv ${OUTFOLDER}/${CONTIGS}/contigs.fa ${OUTFOLDER}/${CONTIGS}/contigs_OriginalNames.fa
    rename.sh in=${OUTFOLDER}/${CONTIGS}/contigs_OriginalNames.fa out=${OUTFOLDER}/${CONTIGS}/contigs.fa prefix=SISRS addprefix=t
    echo ==== Scafolds Renamed ====
    ${DIR}/libexec/sisrs/seq_length.py ${OUTFOLDER}/${CONTIGS} #Create TSV with scaffold lengths
    bowtie2-build ${OUTFOLDER}/"${CONTIGS}"/contigs.fa ${OUTFOLDER}/"${CONTIGS}"/contigs      #index contigs

    #Find all FASTQ files in each species folder
    for FOLDER in "${FOLDERLISTA[@]}";do
        FASTQ=( $( find ${FOLDER} -name "*fastq" ) )
        FASTQLIST=( $(join_by , "${FASTQ[@]}"))
        FOLDERNAME=( $(echo $(basename ${FOLDER} ) ) )
        echo ==== Aligning ${FOLDERNAME} as Single-Ended ====
        #Align all species reads against composite genome. N=1 allows a mismatch #x The basename of the index for the reference genome
        bowtie2 -p "${PROCESSORS}" -N 1 --local -x ${OUTFOLDER}/"${CONTIGS}"/contigs -U ${FASTQLIST} | samtools view -Su -@ "${PROCESSORS}" -F 4 - | samtools sort -@ "${PROCESSORS}" - -o ${FOLDER}/${FOLDERNAME}_Temp.bam
        #Extract uniquely mapping reads
        samtools view -@ "${PROCESSORS}" -H ${FOLDER}/${FOLDERNAME}_Temp.bam > ${FOLDER}/${FOLDERNAME}_Header.sam
        samtools view -@ "${PROCESSORS}" ${FOLDER}/${FOLDERNAME}_Temp.bam | grep -v "XS:" | cat ${FOLDER}/${FOLDERNAME}_Header.sam - | samtools view -@ "${PROCESSORS}" -b - > ${FOLDER}/${FOLDERNAME}.bam
        #Remove temporary files
        rm ${FOLDER}/${FOLDERNAME}_Temp.bam
        rm ${FOLDER}/${FOLDERNAME}_Header.sam
    done
    echo ==== Done Aligning ====
    #index bam
    parallel --jobs "${PROCESSORS}" 'samtools index "$( echo {}/$(basename {} ) )".bam' ::: "${FOLDERLISTA[@]}"
    echo ==== Done Indexing Bam Files ====
}

mapContigs(){
    #map contigs to reference
    if [ -n "${REFFILE}" ]; then
        NAME=$( echo ${REFFILE} | sed 's/\.[^.]*$//' )
        bowtie2-build ${REFFILE} ${NAME}        #bowtie2-build [options]* <reference_in> <bt2_base>
        bowtie2 -p ${PROCESSORS} -N 1 -x ${NAME} -f -U ${OUTFOLDER}/"${CONTIGS}"/contigs.fa -S ${OUTFOLDER}/"${CONTIGS}"/align_contigs.sam    #bowtie2 -x <ref_base> -U <fq files> -S <output sam>
	echo ==== Done Mapping Contigs ====
    fi
}

identifyFixedSites(){
    samtools faidx ${OUTFOLDER}/${CONTIGS}/contigs.fa

    parallel --jobs "${PROCESSORS}" 'samtools mpileup -f' "${OUTFOLDER}"/"${CONTIGS}"/contigs.fa '"$( echo {}/$(basename {} ) )".bam' '> "$( echo {}/$(basename {} ) )".pileups' ::: "${FOLDERLISTA[@]}"
    parallel --jobs "${PROCESSORS}" "${DIR}/libexec/sisrs/specific_genome.py {} ${OUTFOLDER}/${CONTIGS}/contigs.fa" ::: "${FOLDERLISTA[@]}"

    if [[ $? != 0 ]]; then
        echo "specific_genome.py failed"
        exit 1
    fi

    parallel --jobs "${PROCESSORS}" "samtools faidx {}/contigs.fa" ::: "${FOLDERLISTA[@]}"
    parallel --jobs "${PROCESSORS}" 'bowtie2-build' {}/contigs.fa {}/contigs ::: "${FOLDERLISTA[@]}"

    #align reads to contigs
    for FOLDER in "${FOLDERLISTA[@]}";do
        FOLDERNAME=( $(echo $(basename ${FOLDER} ) ) )
        rm ${FOLDER}/${FOLDERNAME}.bam
        rm ${FOLDER}/${FOLDERNAME}.bam.bai
        rm ${FOLDER}/${FOLDERNAME}.pileups
        FASTQ=( $( find ${FOLDER} -name "*fastq" ) )
        FASTQLIST=( $(join_by , "${FASTQ[@]}"))
        echo ==== Aligning ${FOLDERNAME} as Single-Ended ====
        #Align all species reads against composite genome. N=1 allows a mismatch #x The basename of the index for the reference genome
        bowtie2 -p "${PROCESSORS}" -N 1 --local -x ${FOLDER}/contigs -U ${FASTQLIST} | samtools view -Su -@ "${PROCESSORS}" -F 4 - | samtools sort -@ "${PROCESSORS}" - -o ${FOLDER}/${FOLDERNAME}_Temp.bam
        #Extract uniquely mapping reads
        samtools view -@ "${PROCESSORS}" -H ${FOLDER}/${FOLDERNAME}_Temp.bam > ${FOLDER}/${FOLDERNAME}_Header.sam
        samtools view -@ "${PROCESSORS}" ${FOLDER}/${FOLDERNAME}_Temp.bam | grep -v "XS:" | cat ${FOLDER}/${FOLDERNAME}_Header.sam - | samtools view -@ "${PROCESSORS}" -b - > ${FOLDER}/${FOLDERNAME}.bam
        #Remove temporary files
        rm ${FOLDER}/${FOLDERNAME}_Temp.bam
        rm ${FOLDER}/${FOLDERNAME}_Header.sam
    done

    parallel --jobs "${PROCESSORS}" 'samtools index "$( echo {}/$(basename {} ) )".bam' ::: "${FOLDERLISTA[@]}"
    parallel --jobs "${PROCESSORS}" 'samtools mpileup -f' {}/contigs.fa '"$( echo {}/$(basename {} ) )".bam' '> "$( echo {}/$(basename {} ) )".pileups' ::: "${FOLDERLISTA[@]}"

    #put base for each site in a dictionary (allows no variation when calling sites)
    parallel --jobs "${PROCESSORS}" "${DIR}/libexec/sisrs/get_pruned_dict.py {} ${MINREAD} ${THRESHOLD}" ::: "${FOLDERLISTA[@]}"
    if [[ $? != 0 ]]; then
        echo "get_pruned_dict.py failed"
        exit 1
    fi
    echo ==== Done Identifying Fixed Sites Without Error ====
}

outputAlignment(){
    if [ -n "${REFFILE}" ]; then
        ${DIR}/libexec/sisrs/get_alignment.py $((${#FOLDERLISTA[@]} - 2)) ${REFFILE} ${OUTFOLDER} ${ASSEMBLER}
    else
        ${DIR}/libexec/sisrs/get_alignment.py $((${#FOLDERLISTA[@]} - 2)) X ${OUTFOLDER} ${ASSEMBLER}       #alignment with up to all but 2 missing
    fi
    if [[ $? != 0 ]]; then
        echo "get_alignment.py failed"
        exit 1
    fi

}

changeMissing(){
    ${DIR}/libexec/sisrs/filter_nexus_for_missing.py ${OUTFOLDER}/alignment_pi.nex ${MISSING}       #alignment w specified number missing from alignment_pi.nex
    if [[ $? != 0 ]]; then
        echo "filtering for missing failed"
        exit 1
    fi
    #Clean locs_m*.txt file
    tr " " "\n" < ${OUTFOLDER}/locs_m${MISSING}.txt | grep -oe "SISRS_[^/]*" - | uniq -c | sort -k1 -nr | awk '{print $2}' > "${OUTFOLDER}/locs_m${MISSING}_Clean.txt"

    #Parallel processing of alignment.nex for comparison
    if [[ ! -d "${OUTFOLDER}}/alignmentDataWithSingletons" ]]; then
        mkdir ${OUTFOLDER}/alignmentDataWithSingletons
        mv ${OUTFOLDER}/alignment.nex ${OUTFOLDER}/alignmentDataWithSingletons
    fi

    ${DIR}/libexec/sisrs/filter_nexus_for_missing.py ${OUTFOLDER}/alignmentDataWithSingletons/alignment.nex ${MISSING}       #alignment w specified number missing from alignment.nex
    if [[ $? != 0 ]]; then
        echo "filtering for missing failed"
        exit 1
    fi
    #Clean locs_m*.txt file
    tr " " "\n" < ${OUTFOLDER}/alignmentDataWithSingletons/locs_m${MISSING}.txt | grep -oe "SISRS_[^/]*" - | uniq -c | sort -k1 -nr | awk '{print $2}' > "${OUTFOLDER}/alignmentDataWithSingletons/locs_m${MISSING}_Clean.txt"
}

runSISRS(){
    if [[ "${cmds[*]}" =~ "${CMD}" ]]; then               # get pos in list of commands
        for (( i = 0; i < ${#cmds[@]}; i++ )); do
            if [[ "${cmds[$i]}" == "${CMD}" ]]; then
                break
            fi
        done
    else
        i=0
    fi
    if [[ ${SUBCOMMAND} == 1 ]]; then
      for (( i = $i; i < ${#cmds[@]}; i++ )); do      #run from selected opt to end
        ${cmds[$i]}
      done
    else
      echo ===Running Subcommand $(echo ${cmds[$i]}) Alone===
      ${cmds[$i]}
    fi

    #run as raxml -s "${OUTFOLDER}"/alignment_pi_mX.phylip-relaxed -n <out> -m ASC_GTRGAMMA [--asc-corr=lewis] -T $1 -f a -p $RANDOM -N 100 -x $RANDOM
}

####################LOCI#######################

copyRefContigs(){
  if [[ -e "${OUTFOLDER}/locs_m${MISSING}_Clean.txt" ]];then
    parallel --jobs "${PROCESSORS}" "${DIR}/libexec/gfr/get_seq.py" '{}/contigs.fa' "${OUTFOLDER}/locs_m${MISSING}_Clean.txt" '{}/ref_genes.fa'  ::: "${FOLDERLISTA[@]}"
  else
    echo === locs_m${MISSING}_Clean.txt not found in ${OUTFOLDER}. Running changeMissing... ===
    changeMissing
    parallel --jobs "${PROCESSORS}" "${DIR}/libexec/gfr/get_seq.py" '{}/contigs.fa' "${OUTFOLDER}/locs_m${MISSING}_Clean.txt" '{}/ref_genes.fa'  ::: "${FOLDERLISTA[@]}"
  fi
}


fromRefToSpRef(){
    grep \> "${OUTFOLDER}"/ref_genes.fa | sed 's/>//' |sort|uniq > "${OUTFOLDER}"/loci.txt
    bowtie2-build ${OUTFOLDER}/ref_genes.fa ${OUTFOLDER}/ref_genes      #index

    #align reads to contigs
    for FOLDER in "${FOLDERLISTA[@]}";do
        FOLDERNAME=( $(echo $(basename ${FOLDER} ) ) )
        FASTQ=( $( find ${FOLDER} -name "*fastq" ) )
        FASTQLIST=( $(join_by , "${FASTQ[@]}"))
        echo ==== Aligning ${FOLDERNAME} as Single-Ended ====
        #Align all species reads against composite genome. N=1 allows a mismatch #x The basename of the index for the reference genome
        bowtie2 -p "${PROCESSORS}" -N 1 --local -x ${OUTFOLDER}/ref_genes -U ${FASTQLIST} | samtools view -Su -@ "${PROCESSORS}" -F 4 - | samtools sort -@ "${PROCESSORS}" - -o ${FOLDER}/${FOLDERNAME}_Temp.bam
        #Extract uniquely mapping reads
        samtools view -@ "${PROCESSORS}" -H ${FOLDER}/${FOLDERNAME}_Temp.bam > ${FOLDER}/${FOLDERNAME}_Header.sam
        samtools view -@ "${PROCESSORS}" ${FOLDER}/${FOLDERNAME}_Temp.bam | grep -v "XS:" | cat ${FOLDER}/${FOLDERNAME}_Header.sam - | samtools view -@ "${PROCESSORS}" -b - > ${FOLDER}/${FOLDERNAME}.bam
        #Remove temporary files
        rm ${FOLDER}/${FOLDERNAME}_Temp.bam
        rm ${FOLDER}/${FOLDERNAME}_Header.sam
    done

    samtools faidx ${OUTFOLDER}/ref_genes.fa

    parallel --jobs "${PROCESSORS}" 'samtools index "$( echo {}/$(basename {} ) )".bam' ::: "${FOLDERLISTA[@]}"
    parallel --jobs "${PROCESSORS}" 'samtools mpileup -f' ${OUTFOLDER}/ref_genes.fa '"$( echo {}/$(basename {} ) )".bam' '> "$( echo {}/$(basename {} ) )".pileups' ::: "${FOLDERLISTA[@]}"

    parallel --jobs "${PROCESSORS}" "${DIR}/libexec/sisrs/specific_genome.py" {} ${OUTFOLDER}/ref_genes.fa ::: "${FOLDERLISTA[@]}"

    parallel --jobs "${PROCESSORS}" mv {}/contigs.fa {}/ref_genes.fa  ::: "${FOLDERLISTA[@]}"
}

gfr_aligntoConservedContigs(){
    parallel --jobs "${PROCESSORS}" bowtie2-build '{}/ref_genes.fa {}/ref_genes' ::: "${FOLDERLISTA[@]}"   #build index for conserved contigs
    find "${OUTFOLDER}"/*_loci/ -type f -name '*bam' | parallel -j "${PROCESSORS}" rm -f {}    #delete old bam

    for FOLDER in "${FOLDERLISTA[@]}";do
        FOLDERNAME=( $(echo $(basename ${FOLDER} ) ) )
        FASTQ=( $( find ${FOLDER} -name "*fastq" ) )
        FASTQLIST=( $(join_by , "${FASTQ[@]}"))
        echo ==== Aligning ${FOLDERNAME} to Conserved Contigs ====
        #Align all species reads against composite genome. N=1 allows a mismatch #x The basename of the index for the reference genome
        bowtie2 -p "${PROCESSORS}" -N 1 --local -x ${FOLDER}/ref_genes -U ${FASTQLIST} | samtools view -Su -@ "${PROCESSORS}" -F 4 - | samtools sort -@ "${PROCESSORS}" - -o ${FOLDER}_loci/${FOLDERNAME}_Temp.bam
        #Extract uniquely mapping reads
        samtools view -@ "${PROCESSORS}" -H ${FOLDER}_loci/${FOLDERNAME}_Temp.bam > ${FOLDER}_loci/${FOLDERNAME}_Header.sam
        samtools view -@ "${PROCESSORS}" ${FOLDER}_loci/${FOLDERNAME}_Temp.bam | grep -v "XS:" | cat ${FOLDER}_loci/${FOLDERNAME}_Header.sam - | samtools view -@ "${PROCESSORS}" -b - > ${FOLDER}_loci/${FOLDERNAME}.bam
        #Remove temporary files
        rm ${FOLDER}_loci/${FOLDERNAME}_Temp.bam
        rm ${FOLDER}_loci/${FOLDERNAME}_Header.sam
    done
}

gfr_mergebam(){
    declare -a TOMERGE=()
    for FOLDER in "${FOLDERLISTA[@]}"; do
        rm -f "$FOLDER"_loci/merged.bam        # remove existing merged.bam file
        if [[ $(ls -l "$FOLDER"_loci/*bam | wc -l) -eq 1 ]]; then      #if only one file just link
            F="$FOLDER"_loci/*bam
            ln $(echo "$F") "$FOLDER"_loci/merged.bam
        elif [[ $(ls -l "$FOLDER"_loci/*bam | wc -l) -gt 1 ]]; then
            TOMERGE+=("$FOLDER"_loci)
        fi
    done
    if [[ "${#TOMERGE[@]}" -gt 0 ]]; then
        parallel -j "${PROCESSORS}" samtools merge '{}/merged.bam {}/*.bam' ::: "${TOMERGE[@]}"
    fi
}

gfr_getAlleles(){
    parallel -j "${PROCESSORS}" samtools index {}_loci/merged.bam ::: "${FOLDERLISTA[@]}"
    parallel -j "${PROCESSORS}" "${DIR}/libexec/gfr/make_alignment_from_bam.py {}_loci/merged.bam ${MINREAD}" ::: "${FOLDERLISTA[@]}"  #takes bam file aligned to ref_genes for one species #outputs .fa file for all loci for one species
}

gfr_getAlignments(){
    ${DIR}/libexec/gfr/genealign_from_allgenes.py ${ALLELES} "${OUTFOLDER}"  #make files for each gene containing seq for each species

    for F in "${FOLDERLISTA[@]}"; do mv "${OUTFOLDER}"/loci/$(basename ${F}).fa "${OUTFOLDER}"/loci/$(basename ${F}).fasta; done   # move species fasta files so not aligned

    find "${OUTFOLDER}"/loci/ -type f -name '*fa' | parallel -j "${PROCESSORS}" "mafft {} > {.}_align.fa"      #align

}

gfr_trimLoci(){

    find "${OUTFOLDER}"/loci/ -type f -name '*align.fa' | parallel -j "${PROCESSORS}" "${DIR}/libexec/gfr/convert_formats.py {} fasta phylip-relaxed"     #convert to phy

    find "${OUTFOLDER}"/loci/ -type f -name '*_align.phylip-relaxed' | parallel -j "${PROCESSORS}" "${DIR}/libexec/gfr/trim_post_alignment.py {} ${#FOLDERLISTA[@]}"    #trim ends
}

gfr_selectLoci_MV(){
    #pick out loci by most variable in alignment_pi.nex
    COUNT=0
    POS=1
    if [[ -e "${OUTFOLDER}"/loci/newpartitionsMV.txt ]]; then rm "${OUTFOLDER}"/loci/newpartitionsMV.txt; fi
    if [[ -e "${OUTFOLDER}"/loci/phy_filesMV.txt ]]; then rm "${OUTFOLDER}"/loci/phy_filesMV.txt; fi

    while read i; do

        F=${i}_align.phylip-relaxed
        if [[ -e "${OUTFOLDER}"/loci/$F ]]; then
            COUNT=$(( $COUNT + 1 ))
            GLENGTH=$(head -1 "${OUTFOLDER}"/loci/$F|awk '{print $2}')
            echo DNA, p${COUNT}=${POS}-$((${POS}-1+${GLENGTH})) >> "${OUTFOLDER}"/loci/newpartitionsMV.txt           #get partitions
            POS=$((${POS}+${GLENGTH}))
            echo "${OUTFOLDER}"/loci/$F >> "${OUTFOLDER}"/loci/phy_filesMV.txt
            if [[ $POS -gt ${OUTLENGTH} ]]; then
                break
            fi
        fi
    done < "${OUTFOLDER}"/loci.txt
}

gfr_selectLoci_MS(){
    #pick out loci by most species, then most variable in alignment_pi.nex
    COUNT=0
    POS=1
    if [[ -e "${OUTFOLDER}"/loci/newpartitionsMS.txt ]]; then rm "${OUTFOLDER}"/loci/newpartitionsMS.txt; fi
    if [[ -e "${OUTFOLDER}"/loci/phy_filesMS.txt ]]; then rm "${OUTFOLDER}"/loci/phy_filesMS.txt; fi

    for ((NUMSP="${#FOLDERLISTA[@]}";NUMSP>1;NUMSP--)); do
        while read i; do
            F=${i}_align.phylip-relaxed
            if [[ -e "${OUTFOLDER}"/loci/$F ]]; then
                if [[ $(head -1 "${OUTFOLDER}"/loci/$F|awk '{print $1}') -eq ${NUMSP} ]]; then
                    COUNT=$(( $COUNT + 1 ))
                    GLENGTH=$(head -1 "${OUTFOLDER}"/loci/$F|awk '{print $2}')
                    echo DNA, p${COUNT}=${POS}-$((${POS}-1+${GLENGTH})) >> "${OUTFOLDER}"/loci/newpartitionsMS.txt           #get partitions
                    POS=$((${POS}+${GLENGTH}))
                    echo "${OUTFOLDER}"/loci/$F >> "${OUTFOLDER}"/loci/phy_filesMS.txt
                    if [[ $POS -gt 500000 ]] ; then
                        break
                    fi
                fi
            fi
        done < "${OUTFOLDER}"/loci.txt
        if [[ $POS -gt ${OUTLENGTH} ]] ; then
            break
        fi
    done
}

gfr_catLoci(){
    ${DIR}/libexec/gfr/concatenate_phy.py "${OUTFOLDER}"/loci/phy_filesMS.txt "${OUTFOLDER}"/loci/concat_lociMS.phylip-relaxed "${FOLDERLISTA[@]}"        #concatenate selected loci for raxml analysis
    ${DIR}/libexec/gfr/concatenate_phy.py "${OUTFOLDER}"/loci/phy_filesMV.txt "${OUTFOLDER}"/loci/concat_lociMV.phylip-relaxed "${FOLDERLISTA[@]}"
    #run as raxml -r <known_tree> -M -m GTRGAMMA -p $RANDOM -T <num_threads> -q "${OUTFOLDER}"/loci/newpartitions.txt -s "${OUTFOLDER}"/loci/concat_loci.phylip-relaxed -n <out_name>

    ${DIR}/libexec/gfr/convert_formats.py "${OUTFOLDER}"/loci/concat_lociMS.phylip-relaxed phylip-relaxed mega       #convert format to mega for reltime
    ${DIR}/libexec/gfr/convert_formats.py "${OUTFOLDER}"/loci/concat_lociMV.phylip-relaxed phylip-relaxed mega       #convert format to mega for reltime
}

runGFR(){
    for FOLDER in "${FOLDERLISTA[@]}"; do
        if [ ! -d "$FOLDER"_loci ]; then
            mkdir "$FOLDER"_loci
        fi
    done

    gfr_aligntoConservedContigs
    gfr_mergebam

    if [ ! -d "${OUTFOLDER}"/loci ]; then
        mkdir "${OUTFOLDER}"/loci
    else
        find "${OUTFOLDER}"/loci/ -type f -name '*' | parallel -j "${PROCESSORS}" "rm -f {}"    #delete old loci
    fi

    gfr_getAlleles
    gfr_getAlignments
    gfr_trimLoci
    gfr_selectLoci_MV
    gfr_selectLoci_MS
    gfr_catLoci
}

####################RUN####################
if [[ $CMD = "sites" ]] || [[ "${cmds[*]}" =~ $CMD ]]; then
    # Run SISRS only
    echo "**** SISRS ****"
    runSISRS
elif [[ $CMD = "loci" ]]; then
    # Run SISRS with loci (GFR). First check if alignment_pi.nex and/or ref_genes.fa. If there is no alignment_pi.nex then rerun SISRS to produce file.
    if [[ -f "${FOLDERLISTA[0]}"/ref_genes.fa ]]; then
        echo "** Running SISRS loci **"
    elif [[ -f "${OUTFOLDER}"/alignment_pi.nex ]]; then
        echo "** Missing reference, getting from SISRS sites alignment **"
	copyRefContigs  # Get ref_genes.fa from previous sisrs run
    elif [[ -f "${OUTFOLDER}"/ref_genes.fa ]]; then
        echo "** Getting species specific references **"
        fromRefToSpRef
    else
        # need to rerun SISRS from scratch to get ref_genes.fa
        echo "** Missing alignment and reference, running SISRS sites **"
        runSISRS
        copyRefContigs
    fi
    runGFR
else
    echo "You must specify sisrs sites or loci"
    exit 0
fi

if [[ DEBUG -eq 1 ]]; then
    echo "DIRS          = ${DIRS}"
    echo "DIR           = ${DIR}"
    echo "MAINFOLDER    = ${MAINFOLDER}"
    echo "OUTFOLDER     = ${OUTFOLDER}"
    echo "FILELIST      = ${FILELIST[@]}"
    echo "FOLDERLIST    = ${FOLDERLIST[@]}"
    echo "FILELISTA     = ${FILELISTA}"
    echo "FILELISTU     = ${FILELISTU[@]}"
    echo "FILELISTA[@]  = ${FILELISTA[@]}"
    echo "#FILELISTU[@] = ${#FILELISTU[@]}"
    echo "FOLDERLISTA   = ${FOLDERLISTA}"
    echo "MISSING       = ${MISSING}"
fi
